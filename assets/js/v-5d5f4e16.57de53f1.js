"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[451],{6719:(l,i,e)=>{e.r(i),e.d(i,{data:()=>t});const t={key:"v-5d5f4e16",path:"/java/xml.html",title:"XML",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概念：Extensible Markup Language 可扩展标记语言",slug:"概念-extensible-markup-language-可扩展标记语言",children:[]},{level:2,title:"语法",slug:"语法",children:[]},{level:2,title:"解析:操作xml文档，将文档中的数据读取到内存中",slug:"解析-操作xml文档-将文档中的数据读取到内存中",children:[]}],filePathRelative:"java/xml.md",git:{updatedTime:1618727542e3,contributors:[]}}},2495:(l,i,e)=>{e.r(i),e.d(i,{default:()=>u});const t=(0,e(6252).uE)('<h1 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h1><h2 id="概念-extensible-markup-language-可扩展标记语言" tabindex="-1"><a class="header-anchor" href="#概念-extensible-markup-language-可扩展标记语言" aria-hidden="true">#</a> 概念：Extensible Markup Language 可扩展标记语言</h2><pre><code>* 可扩展：标签都是自定义的。&lt;user&gt; &lt;student&gt;\n</code></pre><ul><li>功能 <ul><li>存储数据 <ul><li>配置文件</li><li>在网络中传输</li></ul></li></ul></li><li>与html的区别 <ul><li>w3c：万维网联盟 <ul><li>自定义标签 预定义标签</li><li>语法严格 语法松散 <ul><li>存储数据 展示数据</li></ul></li></ul></li></ul></li></ul><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><ul><li><p>基本语法：</p><ol><li>xml文档的后缀名：.xml</li><li>第一行必须定义为文档声明</li><li>有且仅有一个根标签</li><li>属性值必须使用引号（单双皆可）</li><li>标签必须正确关闭</li><li>标签名称区分大小写</li></ol><ul><li>快速入门：</li></ul></li><li><p>组成部分：</p><ol><li>文档声明 <ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表： <ol><li>*verison：版本号</li><li>encoding：编码方式</li><li>standalone：是否独立</li></ol></li></ol></li><li>指令</li><li>标签</li><li>属性</li><li>文本 <ol><li>CDATA区，内容原样展示 <code>&lt;![CDATA[data]]&gt;</code></li></ol></li></ol></li><li><p>约束：规定xml文档的书写规则</p><ul><li>作为框架的使用者（程序员）： <ol><li>能够在xml中引入约束文档</li><li>能够简单地读懂约束文档</li></ol></li><li>分类： <ol><li>DTD：一种简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ol></li><li>DTD： <ul><li>引入到xml文档中 <ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束规则定义在外部dtd中 <ul><li>本地：</li><li>网络：</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="解析-操作xml文档-将文档中的数据读取到内存中" tabindex="-1"><a class="header-anchor" href="#解析-操作xml文档-将文档中的数据读取到内存中" aria-hidden="true">#</a> 解析:操作xml文档，将文档中的数据读取到内存中</h2><ul><li><p>操作xml文档：</p><ol><li>解析（读取）：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li><p>解析方式：</p><ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗DOM树 <ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占用内存较高</li></ul></li><li>SAX：逐行读取，基于事件驱动（读一行释放一行） <ul><li>优点：基本不占内存</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li><p>xml常见的解析器：</p><ol><li>JAXP：sun公司提供的解析器，支持dom和sax</li><li>DOM4J：dom</li><li>Jsoup：</li><li>PULL：Android内置的解析器，sax方式</li></ol></li><li><p>Jsoup:</p><ul><li>快速入门 <ul><li>步骤： <ol><li>导入jar包</li><li>获取一个document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li></ul></li><li><p>对象的使用：</p><ul><li>Jsoup：工具类，可以解析html或xml文档，返回Document <ul><li>parse：解析html或xml文档，返回document <ul><li>parse(File in, String charsetName)：解析xml或html文件的</li><li>parse(String html):解析xml或html字符串</li><li>parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul></li><li>Document：文档对象，代表内存中的dom树 <ul><li>获取Element对象 <ul><li>getElementById(String id):根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key):根据属性名称获取元素对象</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素集合</li></ul></li></ul></li><li>Elements：元素Element对象的集合，可以当作ArrayList<code>&lt;Element&gt;</code></li><li>Element：元素对象 <ul><li>获取子元素对象 <ul><li>getElementById(String id):根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key):根据属性名称获取元素对象</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素集合</li></ul></li><li>获取属性值 <ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li>获取文本内容 <ul><li>String text():获取文本内容</li><li>String html():获取标签体的所有内容（包括子标签的字符串内容）</li></ul></li></ul></li></ul></li><li><p>Node：节点对象</p></li><li><p>快捷查询方式：</p><ol><li>selector:选择器 <ul><li>使用的方法：Elements select(String cssQuery) <ul><li>语法：参考Selector类中定义的语法</li></ul></li></ul></li><li>XPath：即为XML路径语言，是一种用来确定XML文档中某部分位置的语言 <ol><li>使用Jsoup的XPath需要额外的jar包</li><li>查询w3cschool参考手册，使用xpath的语法完成查询</li></ol></li></ol></li></ul>',8),u={render:function(l,i){return t}}}}]);