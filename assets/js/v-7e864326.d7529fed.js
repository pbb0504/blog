"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[287],{6804:(l,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-7e864326",path:"/java/%E6%B3%A8%E8%A7%A3.html",title:"注解",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"自定义注解",slug:"自定义注解",children:[]},{level:3,title:"元注解：用于描述注解的注解",slug:"元注解-用于描述注解的注解",children:[]},{level:3,title:"在程序使用（解析）注解：获取注解中定义的属性值",slug:"在程序使用-解析-注解-获取注解中定义的属性值",children:[]}],filePathRelative:"java/注解.md",git:{updatedTime:1618727542e3,contributors:[]}}},3884:(l,n,a)=>{a.r(n),a.d(n,{default:()=>i});const s=(0,a(6252).uE)('<h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h1><ul><li><p>概念：说明程序，给计算机看</p></li><li><p>注释：用文字描述程序，给程序员看</p></li><li><p>注解，可以看作是对 一个 类/方法 的一个扩展的模版，每个 类/方法 按照注解类中的规则，来为 类/方法 注解不同的参数，在用到的地方可以得到不同的 类/方法 中注解的各种参数与值</p><ul><li><p>注解也就是Annotation,相信不少人也和我之前一样以为和注释和doc一样，是一段辅助性的文字，其实注解不是这样的。</p></li><li><p>从JDK5开始，Java增加了对元数据（描述数据属性的信息）的支持。其实说白就是代码里的特殊标志，这些标志可以在编译，类加载，运行时被读取，并执行相应的处理，以便于其他工具补充信息或者进行部署。</p></li></ul></li><li><p>概念描述：</p><ul><li>jdk1.5之后的新特性</li><li>说明程序</li><li>使用注解：@注解名称</li></ul></li><li><p>作用分类</p><ul><li>编写文档：通过代码里标识的注解生成文档【生成doc文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ul></li><li><p>jdk中预定义的一些注解</p><ul><li><p>@Override：检测被该注解标注的方法是否是继承自父类（父接口）</p></li><li><p>@Deprecated：将该注解标注的内容，表示已过时</p></li><li><p>@SuppressWarnings：压制警告</p><ul><li>一般传递参数all @SuppressWarnings(&quot;all&quot;)</li></ul></li></ul></li></ul><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h3><ul><li><p>格式：</p><p>元注解</p><p>public @interface 注解名称{</p><p>属性列表</p><p>}</p></li><li><p>本质：注解本质上就是一个接口，该接口默认继承Annotation接口</p><ul><li>public interface MyAnno extends java.lang.annotation.Annotation {}</li></ul></li><li><p>属性：接口中可以定义的抽象方法</p><ul><li>要求： <ol><li>属性的返回值类型 <ul><li>基本数据类型</li><li>字符串</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，在使用时需要给属性赋值 <ol><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时可以不进行属性的赋值</li><li>如果只有一个属性需要赋值，并且属性的名称时value，则value可以省略，直接定义值即可</li><li>数组赋值时，值使用大括号包裹。如果数组中只有一个值，则大括号可以省略</li></ol></li></ol></li></ul></li></ul><h3 id="元注解-用于描述注解的注解" tabindex="-1"><a class="header-anchor" href="#元注解-用于描述注解的注解" aria-hidden="true">#</a> 元注解：用于描述注解的注解</h3><ul><li><p>@Target：描述注解能够作用的位置</p><ul><li>ElementType取值： <ul><li>TYPE:可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员方法上</li></ul></li></ul></li><li><p>@Retention：描述注解被保留的阶段</p><ul><li><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中并被JVM读取到\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>@Documented：描述注解是否被抽取到api文档中</p></li><li><p>@Inherited：描述注解是否被子类继承</p></li></ul><h3 id="在程序使用-解析-注解-获取注解中定义的属性值" tabindex="-1"><a class="header-anchor" href="#在程序使用-解析-注解-获取注解中定义的属性值" aria-hidden="true">#</a> 在程序使用（解析）注解：获取注解中定义的属性值</h3><ol><li><p>获取注解定义的位置的对象（class，Method，Field）</p></li><li><p>获取指定的注解</p><ul><li><p>getAnnotation(Class)</p></li><li><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 在内存中生成了一个该注解接口的子类实现对象</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Pro</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        \n    \t<span class="token keyword">return</span> <span class="token string">&quot;com.company.annotation.Demo1&quot;</span><span class="token punctuation">;</span>    \n    <span class="token punctuation">}</span>    \n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        \n    \t<span class="token keyword">return</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">;</span>    \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><ol start="3"><li>调用注解中的抽象方法获取配置的属性值</li></ol></li></ol><ul><li>小结 <ol><li>以后大多数，我们会使用注解而不是自定义注解</li><li>注解给谁用？ <ol><li>编译器</li><li>解析程序用</li></ol></li><li>注解不是程序的一部分，可以理解为一个标签</li></ol></li></ul>',9),i={render:function(l,n){return s}}}}]);