"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[21],{700:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-6bb75112",path:"/java/cookie%E5%92%8Csession.html",title:"cookie 和 session",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"cookie",slug:"cookie",children:[]}],filePathRelative:"java/cookie和session.md",git:{updatedTime:1618730948e3,contributors:[]}}},7628:(s,n,e)=>{e.r(n),e.d(n,{default:()=>c});var a=e(6252);const o=(0,a.Wm)("h1",{id:"cookie-和-session",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#cookie-和-session","aria-hidden":"true"},"#"),(0,a.Uk)(" cookie 和 session")],-1),p=(0,a.Uk)("会话(session)用来跟踪用户的整个会话，常用的跟踪技术有 cookie 和 session。cookie 用于客户端，session 用于服务器端。 由于 http 连接是无状态的，每次连接都是一次全新的请求。服务器对每一次客户端发起的请求都视为不同来源的，即服务器不记住之前有哪个客户端进行过请求。所以当 A 发过一次请求，再次发送的时候服务器不知道这是 A 第二次发送的请求。 因此，单纯地使用 http 连接是不能对用户的状态进行保存的，也就不能进行相应的服务。 "),l=(0,a.Wm)("h2",{id:"cookie",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#cookie","aria-hidden":"true"},"#"),(0,a.Uk)(" cookie")],-1),r=(0,a.Uk)("Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。 服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。 "),i=(0,a.Uk)(" 下面开始解释图中步骤"),t=(0,a.uE)('<ol><li>请求报文（此时没有 Cookie）</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /reader/ HTTP/<span class="token number">1.1</span>\nHost<span class="token operator">:</span> hackr.jp\n*首部字段内没有Cookie的相关信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>响应报文（服务器端生成 Cookie 信息）</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>HTTP/<span class="token number">1.1</span> <span class="token number">200</span> OK\nDate<span class="token operator">:</span> Thu<span class="token punctuation">,</span> <span class="token number">12</span> Jul <span class="token number">2012</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">20</span> GMT\nServer<span class="token operator">:</span> Apache\n＜Set-Cookie<span class="token operator">:</span> sid=<span class="token number">1342077140226724</span>; path=/; expires=Wed<span class="token punctuation">,</span><span class="token number">10</span>-Oct<span class="token number">-12</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">20</span> GMT＞\nContent-Type<span class="token operator">:</span> text/plain; charset=UTF<span class="token number">-8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li>请求报文（自动发送保存着的 Cookie 信息）</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /image/ HTTP/<span class="token number">1.1</span>\nHost<span class="token operator">:</span> hackr.jp\nCookie<span class="token operator">:</span> sid=<span class="token number">1342077140226724</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',6),c={render:function(s,n){return(0,a.wg)(),(0,a.j4)(a.HY,null,[o,(0,a.Wm)("p",null,[p,(0,a.Wm)("img",{src:s.$withBase("images/http无状态.png"),alt:"http无状态"},null,8,["src"])]),l,(0,a.Wm)("p",null,[r,(0,a.Wm)("img",{src:s.$withBase("images/从服务器获取cookie.png"),alt:"从服务器获取cookie"},null,8,["src"]),(0,a.Wm)("img",{src:s.$withBase("images/使用cookie发起请求.png"),alt:"使用cookie发起请求"},null,8,["src"]),i]),t],64)}}}}]);